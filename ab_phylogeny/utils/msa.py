#!/usr/bin/python
# filename: msa.py



###########################################################################
#
# Copyright (c) 2014 Bryan Briney.  All rights reserved.
#
# @version: 1.0.0
# @author: Bryan Briney
# @license: MIT (http://opensource.org/licenses/MIT)
#
###########################################################################


import os
import re
import subprocess as sp


def align(seqs, fasta):
	'''
	Makes a multiple sequence alignment.

	Input
	seqs: sequences to be aligned (as biopython SeqIO objects)
	fasta: path to use for the alignment input file

	Output
	path to the alignment file generated by MUSCLE
	'''
	infile = build_alignment_input(seqs, fasta)
	return muscle(infile, len(seqs))


def build_alignment_input(seqs, fasta):
	flist = []
	for s in seqs:
		seq_id = re.sub('[:;]', '_', seq.id)
		flist.append('>{}\n{}'.format(seq_id, str(seq.seq).upper()))
	open(fasta, 'w').write('\n'.join(flist))


def muscle(fasta, count):
	output_dir = os.path.dirname(fasta)
	output_name = '{}_aligned.aln'.format(os.path.basename(fasta).replace('.fasta', ''))
	output = os.path.join(output_dir, output_name)
	if len(count) < 100:
		muscle_cline = 'muscle -clwstrict {} > {}'.format(fasta, output)
	elif len(count) < 1000:
		muscle_cline = 'muscle -clwstrict -maxiters 2 {} > {}'.format(fasta, output)
	else:
		muscle_cline = 'muscle -clwstrict -maxiters 1 -diags {} > {}'.format(fasta, output)
	m = sp.Popen(muscle_cline, stdout=sp.PIPE, stderr=sp.PIPE, shell=True)
	stdout, stderr = m.communicate()
	return output
